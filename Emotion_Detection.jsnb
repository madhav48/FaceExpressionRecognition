{
  "metadata": {
    "name": "Main File 3",
    "language_info": {
      "name": "JavaScipt",
      "version": "8.0"
    }
  },
  "jsnbversion": "v0.1",
  "cells": [
    {
      "code": "<H1> Import Required Libraries <H1>",
      "status": "",
      "output": "<h1> Import Required Libraries </h1><h1></h1>",
      "type": "html"
    },
    {
      "code": "scrib.loadScript(\"https://cdn.jsdelivr.net/npm/brain.js\") //Brain.js for models\n\n// Script Files for transforming images to prevent sequence learning..\nscrib.loadScript(\"https://cdn.jsdelivr.net/npm/image-js@0.35.5/lib/index.min.js\")\nscrib.loadScript(\"https://cdn.jsdelivr.net/npm/jimp@0.22.10/browser/lib/jimp.min.js\")",
      "status": "[2]<br><span style=\"font-size:8px\">36ms<span></span></span>",
      "output": "",
      "type": "code"
    },
    {
      "code": "<h1> Load CSV File Into Array of Appropriate Shape </h1>",
      "status": "",
      "output": "<h1> Load CSV File Into Array of Appropriate Shape </h1>",
      "type": "html"
    },
    {
      "code": "// Load the csv file from the loacal pc. \nload_file().then(csv=>{data=[].from_csv(csv)})",
      "status": "[3]<br><span style=\"font-size:8px\">6.893s<span></span></span>",
      "output": "",
      "type": "code"
    },
    {
      "code": "// Remove the unnecessary rows from the dataset..\ndata.shift()\ndata.pop()\ndata.length",
      "status": "[4]<br><span style=\"font-size:8px\">9ms<span></span></span>",
      "output": "35887 <br>",
      "type": "code"
    },
    {
      "code": "\n// Helper functions to load the data that is by converting and mapping the pixel values (to int and array) and then output array.\n\ntransformStringToArray = function (inputString) {\n  // Use split to separate the string into an array of strings\n  const stringArray = inputString.split(' ');\n  // Use map to convert each string into an integer\n  const intArray = stringArray.map(Number);\n  return intArray;\n  //return intArray.slice(0,100);\n}\n\noutputarray = function (index) {\n  \n  // Create an array of zeros with the specified length\n  const resultArray = Array(7).fill(0);\n  \n  // Make  the index 1 of the main element.\n  resultArray[index] = 1;\n\n  return resultArray;\n}",
      "status": "[5]<br><span style=\"font-size:8px\">7ms<span></span></span>",
      "output": "function (index) {\n  \n  // Create an array of zeros with the specified length\n  const resultArray = Array(7).fill(0);\n  \n  // Make  the index 1 of the main element.\n  resultArray[index] = 1;\n\n  return resultArray;\n} <br>",
      "type": "code"
    },
    {
      "code": "// Convert csv data into training and testing data format..\ntrainingData = []\ntestData = []\n\ndata.forEach(function(value){\n\n\tif (value[2] == \"PrivateTest\"){\n\t  testData.push({\n\t  \tinput: transformStringToArray(value[1]),\n\t\toutput: value[0]\n\t  });\n\t}\n\t\n\telse{\n\t\ttrainingData.push({\n\t  \tinput: transformStringToArray(value[1]),\n\t\toutput: outputarray(value[0])\n\t  });\n\t\t\t }\n})\n",
      "status": "[6]<br><span style=\"font-size:8px\">5.439s<span></span></span>",
      "output": "",
      "type": "code"
    },
    {
      "code": "// Code to store weights in a json file..\ndownload_json = function(net){\n//Serialize the mode;\nconst ModelValues=JSON.stringify(net.toJSON());\n//Download the file, push to cloud or store it IPFS. \ndownload_string(ModelValues,\"ModelValues.json\",\"data:text/json;charset=utf-8\")\n}\n// To load weights from json file..\ngetfromjson = function(){\nthen(x=>modelFromFile.fromJSON(JSON.parse(x)))\n}",
      "status": "[7]<br><span style=\"font-size:8px\">12ms<span></span></span>",
      "output": "function(){\nthen(x=&gt;modelFromFile.fromJSON(JSON.parse(x)))\n} <br>",
      "type": "code"
    },
    {
      "code": "<h1>Data Normalization</h1>",
      "status": "",
      "output": "<h1>Data Normalization</h1>",
      "type": "html"
    },
    {
      "code": "// Code for normalizations of data..\nnormalizeInput = function (input) {\n  const normalizedInput = input.map(value => value / 255); // Scaling to [0, 1]\n  return normalizedInput;\n}",
      "status": "[8]<br><span style=\"font-size:8px\">11ms<span></span></span>",
      "output": "function (input) {\n  const normalizedInput = input.map(value =&gt; value / 255); // Scaling to [0, 1]\n  return normalizedInput;\n} <br>",
      "type": "code"
    },
    {
      "code": "trainingData = trainingData.map(({ input, output }) => ({\n\n  input: normalizeInput(input),\n  output,\n}));",
      "status": "[-]",
      "output": "<p class=\"error\">Invalid string length</p>",
      "type": "code"
    },
    {
      "code": "testData = testData.map(({ input, output }) => ({\n  input: normalizeInput(input),\n  output,\n}));",
      "status": "[9]<br><span style=\"font-size:8px\">1.059s<span></span></span>",
      "output": "<p class=\"error\">Object too large to show.</p><br>",
      "type": "code"
    },
    {
      "code": "<h1>Other Helper Functions </h1>",
      "status": "",
      "output": "<h1>Other Helper Functions </h1>",
      "type": "html"
    },
    {
      "code": "// Function to get the index having maximum probbaility..\n\nMaxprob = function (obj) {\n  let maxKey = null;\n  let maxValue = -Infinity;\n\n  for (const key in obj) {\n    if (obj.hasOwnProperty(key) && typeof obj[key] === 'number') {\n      if (obj[key] > maxValue) {\n        maxValue = obj[key];\n        maxKey = key ;\n      }\n    }\n  }\n  return maxKey;\n}",
      "status": "[10]<br><span style=\"font-size:8px\">17ms<span></span></span>",
      "output": "function (obj) {\n  let maxKey = null;\n  let maxValue = -Infinity;\n\n  for (const key in obj) {\n    if (obj.hasOwnProperty(key) &amp;&amp; typeof obj[key] === 'number') {\n      if (obj[key] &gt; maxValue) {\n        maxValue = obj[key];\n        maxKey = key ;\n      }\n    }\n  }\n  return maxKey;\n} <br>",
      "type": "code"
    },
    {
      "code": "// Mapp the expression to 3 categories..\n\nmapexp = function(value){\n\n\tif (value == 0 || value == 1 || value == 2 || value == 4){\n\treturn 2;\n\t}\n  else if (value == 3 || value == 5){\n  return 1\n  }\n\telse{\n\treturn 0;\n\t}\n\n\n}",
      "status": "[11]<br><span style=\"font-size:8px\">18ms<span></span></span>",
      "output": "function(value){\n\n\tif (value == 0 || value == 1 || value == 2 || value == 4){\n\treturn 2;\n\t}\n  else if (value == 3 || value == 5){\n  return 1\n  }\n\telse{\n\treturn 0;\n\t}\n\n\n} <br>",
      "type": "code"
    },
    {
      "code": "// Function for Accuarcy checking..\n\nacc_check = function(net,testData){\n  pass = 0\n\ntestData.forEach(function(value){\n\tif (mapexp(value.output) == mapexp(Maxprob(net.run(value.input)))){\n\t\tpass +=1;\n\t}\n})\n\nreturn ((pass/testData.length)*100)\n}",
      "status": "[12]<br><span style=\"font-size:8px\">17ms<span></span></span>",
      "output": "function(net,testData){\n  pass = 0\n\ntestData.forEach(function(value){\n\tif (mapexp(value.output) == mapexp(Maxprob(net.run(value.input)))){\n\t\tpass +=1;\n\t}\n})\n\nreturn ((pass/testData.length)*100)\n} <br>",
      "type": "code"
    },
    {
      "code": "// Shuffle the data for next iteration..\n\nshuffle = function (array) {\n  for (let i = array.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    // Swap array[i] and array[j]\n    [array[i], array[j]] = [array[j], array[i]];\n\t  }\n  return  array;\n}",
      "status": "[13]<br><span style=\"font-size:8px\">19ms<span></span></span>",
      "output": "function (array) {\n  for (let i = array.length - 1; i &gt; 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    // Swap array[i] and array[j]\n    [array[i], array[j]] = [array[j], array[i]];\n\t  }\n  return  array;\n} <br>",
      "type": "code"
    },
    {
      "code": "// Count repetation of particular expression  in the dataset..\n\ncnt_emo = function(data ,count_value){\n\ncount = 0\ndata.forEach(function(value){\n\t\t\t\t  \n\t\t\t\t  if (Maxprob(value.output) == count_value){\n\t\tcount +=1;\n}\n\t\t\t\t  })\n\treturn count;\n}",
      "status": "[14]<br><span style=\"font-size:8px\">24ms<span></span></span>",
      "output": "function(data ,count_value){\n\ncount = 0\ndata.forEach(function(value){\n\t\t\t\t  \n\t\t\t\t  if (Maxprob(value.output) == count_value){\n\t\tcount +=1;\n}\n\t\t\t\t  })\n\treturn count;\n} <br>",
      "type": "code"
    },
    {
      "code": "<h1>Handle Data Imbalance</h1>",
      "status": "",
      "output": "<h1>Handle Data Imbalance</h1>",
      "type": "html"
    },
    {
      "code": "// Balance the data by getting  all the expreesion rows equal..\n\nbalance_data = function(data){\n  count_arr = [];\n  [0,1,2,3,4,5,6].forEach(function(value){\t\t\t\t\t\t  \n\t\t\t\t\t\t  count_arr.push(cnt_emo(data,value))\n\t\t\t\t\t\t  })\n\n\tleast = Math.min(...count_arr);\nimg_count_arr = [0,0,0,0,0,0,0];\nreturn_data =[];\n\ntrainingData.forEach(function(value){\n\t\t\t\t  \n  img_count = img_count_arr[Maxprob(value.output)]\n  \n  if (img_count < least){\n  \t\timg_count_arr[Maxprob(value.output)] +=1;\n\t\treturn_data.push(value);\n  }\t\t\t\t  \n\t})\n\treturn shuffle(return_data)\n}",
      "status": "[15]<br><span style=\"font-size:8px\">18ms<span></span></span>",
      "output": "function(data){\n  count_arr = [];\n  [0,1,2,3,4,5,6].forEach(function(value){\t\t\t\t\t\t  \n\t\t\t\t\t\t  count_arr.push(cnt_emo(data,value))\n\t\t\t\t\t\t  })\n\n\tleast = Math.min(...count_arr);\nimg_count_arr = [0,0,0,0,0,0,0];\nreturn_data =[];\n\ntrainingData.forEach(function(value){\n\t\t\t\t  \n  img_count = img_count_arr[Maxprob(value.output)]\n  \n  if (img_count &lt; least){\n  \t\timg_count_arr[Maxprob(value.output)] +=1;\n\t\treturn_data.push(value);\n  }\t\t\t\t  \n\t})\n\treturn shuffle(return_data)\n} <br>",
      "type": "code"
    },
    {
      "code": "// New Data after balancing..\n\nnewData = balance_data(trainingData.slice(0,10000))\nnewData.length",
      "status": "[16]<br><span style=\"font-size:8px\">144ms<span></span></span>",
      "output": "1120 <br>",
      "type": "code"
    },
    {
      "code": "<h1> Data Augmentation </h1>",
      "status": "",
      "output": "<h1> Data Augmentation </h1>",
      "type": "html"
    },
    {
      "code": "// Fiunction to transform images to prevent sequence learning..\n\ntransform_image = function (pixelData, width = 48, height  = 48) {\n  \n  // Create a Jimp image from the pixel data\n  const image = new Jimp(width, height);\n\n  for (let y = 0; y < height; y++) {\n    for (let x = 0; x < width; x++) {\n      const pixelIndex = y * width + x;\n      const pixelValue = pixelData[pixelIndex];\n      image.setPixelColor(Jimp.rgbaToInt(pixelValue, pixelValue, pixelValue, 255), x, y);\n    }\n  }\n\n  // Apply random transformations\n  if (Math.random() < 0.5) {\n    // RandomCrop\n    const cropX = Math.floor(Math.random() * (width - 48));\n    const cropY = Math.floor(Math.random() * (height - 48));\n    image.crop(cropX, cropY, 48, 48);\n  }\n\n  if (Math.random() > 0.5) {\n    // RandomRotation\n    const angle = (Math.random() - 0.5) * 30; // Random angle between -15 and 15 degrees\n    image.rotate(angle, false);\n  }\n\n  // RandomAffine - Implement as needed\n\n  if (Math.random() >0.7) {\n    // RandomHorizontalFlip\n    image.flip(true, false);\n  }\n\n  // Resize the image back to the original size or your desired size\n  image.resize(width, height);\n\n  // Get the pixel data from the augmented image\n  const augmentedPixelData = new Array(width * height).fill(0);\n\n  for (let y = 0; y < height; y++) {\n    for (let x = 0; x < width; x++) {\n      const pixelIndex = y * width + x;\n      augmentedPixelData[pixelIndex] = Jimp.intToRGBA(image.getPixelColor(x, y)).r; // Assuming grayscale\n    }\n  }\n\n  return augmentedPixelData;\n}",
      "status": "[17]<br><span style=\"font-size:8px\">17ms<span></span></span>",
      "output": "function (pixelData, width = 48, height  = 48) {\n  \n  // Create a Jimp image from the pixel data\n  const image = new Jimp(width, height);\n\n  for (let y = 0; y &lt; height; y++) {\n    for (let x = 0; x &lt; width; x++) {\n      const pixelIndex = y * width + x;\n      const pixelValue = pixelData[pixelIndex];\n      image.setPixelColor(Jimp.rgbaToInt(pixelValue, pixelValue, pixelValue, 255), x, y);\n    }\n  }\n\n  // Apply random transformations\n  if (Math.random() &lt; 0.5) {\n    // RandomCrop\n    const cropX = Math.floor(Math.random() * (width - 48));\n    const cropY = Math.floor(Math.random() * (height - 48));\n    image.crop(cropX, cropY, 48, 48);\n  }\n\n  if (Math.random() &gt; 0.5) {\n    // RandomRotation\n    const angle = (Math.random() - 0.5) * 30; // Random angle between -15 and 15 degrees\n    image.rotate(angle, false);\n  }\n\n  // RandomAffine - Implement as needed\n\n  if (Math.random() &gt;0.7) {\n    // RandomHorizontalFlip\n    image.flip(true, false);\n  }\n\n  // Resize the image back to the original size or your desired size\n  image.resize(width, height);\n\n  // Get the pixel data from the augmented image\n  const augmentedPixelData = new Array(width * height).fill(0);\n\n  for (let y = 0; y &lt; height; y++) {\n    for (let x = 0; x &lt; width; x++) {\n      const pixelIndex = y * width + x;\n      augmentedPixelData[pixelIndex] = Jimp.intToRGBA(image.getPixelColor(x, y)).r; // Assuming grayscale\n    }\n  }\n\n  return augmentedPixelData;\n} <br>",
      "type": "code"
    },
    {
      "code": "aug_imgs = function(data){\naug_data = []\ndata.forEach(function (row){\n  \n  aug_data.push({\n  input: transform_image(row.input),\n  output: row.output\n  });\n})\n  return aug_data;\n}",
      "status": "[18]<br><span style=\"font-size:8px\">17ms<span></span></span>",
      "output": "function(data){\naug_data = []\ndata.forEach(function (row){\n  \n  aug_data.push({\n  input: transform_image(row.input),\n  output: row.output\n  });\n})\n  return aug_data;\n} <br>",
      "type": "code"
    },
    {
      "code": "aug_data = newData\nnewData = newData.concat(aug_data)\nnewData.length",
      "status": "[19]<br><span style=\"font-size:8px\">23ms<span></span></span>",
      "output": "2240 <br>",
      "type": "code"
    },
    {
      "code": "<h1>Train Model </h1>",
      "status": "",
      "output": "<h1>Train Model </h1>",
      "type": "html"
    },
    {
      "code": "config = {\n  hiddenLayers: [1152,144], // Specify the number of neurons in each hidden layer\n  activation: 'relu', // Activation function for hidden layers\n  outputActivation: 'softmax', // Activation function for the output layer\n  learningRate: 0.01, // Learning rate for training\n  decayRate: 0.999, // Learning rate decay over time\n  momentum: 0.9, // Momentum for training\n  iterations: 3, // Number of training iterations\n  log: true, // Enable logging during training\n  errorThresh: 0.005, // Stop training when the error drops below this threshold\n};\n",
      "status": "[31]<br><span style=\"font-size:8px\">14ms<span></span></span>",
      "output": "{\n  \"hiddenLayers\": [\n    1152,\n    144\n  ],\n  \"activation\": \"relu\",\n  \"outputActivation\": \"softmax\",\n  \"learningRate\": 0.01,\n  \"decayRate\": 0.999,\n  \"momentum\": 0.9,\n  \"iterations\": 3,\n  \"log\": true,\n  \"errorThresh\": 0.005\n} <br>",
      "type": "code"
    },
    {
      "code": "// Define the CNN ..\nnet = new brain.NeuralNetwork(config);",
      "status": "[-]",
      "output": "<p class=\"error\">Sizes must be set before initializing</p>",
      "type": "code"
    },
    {
      "code": " // Train the network (Run for every epoch..)\nnet.train(newData,config);",
      "status": "[32]<br><span style=\"font-size:8px\">17.905s<span></span></span>",
      "output": "{\n  \"error\": 0.14285714285714343,\n  \"iterations\": 3\n} <br>",
      "type": "code"
    },
    {
      "code": "acc_check(net,testData)",
      "status": "[22]<br><span style=\"font-size:8px\">10.733s<span></span></span>",
      "output": "42.65812203956534 <br>",
      "type": "code"
    },
    {
      "code": "// Store weights and baises after traiing the model..\ndownload_json(net)",
      "status": "[-]",
      "output": "<p class=\"error\">download_string is not defined</p>",
      "type": "code"
    },
    {
      "code": "<h1>Testing In Real World </h1>",
      "status": "",
      "output": "<h1>Testing In Real World </h1>",
      "type": "html"
    },
    {
      "code": "// Get model from json file\nnet = new brain.NeuralNetwork();\nload_file().then(x=>net.fromJSON(JSON.parse(x)))",
      "status": "[20]<br><span style=\"font-size:8px\">5.916s<span></span></span>",
      "output": "<p class=\"error\">Object too large to show.</p><br>",
      "type": "code"
    },
    {
      "code": "acc_check(net,testData)",
      "status": "[21]<br><span style=\"font-size:8px\">10.217s<span></span></span>",
      "output": "42.65812203956534 <br>",
      "type": "code"
    },
    {
      "code": "<h1> Live Detection on WebCam Feed </h1>\n\n<h5> Note: First run all the cells below, then use the buttons for detection.. </h5>",
      "status": "",
      "output": "<h1> Live Detection on WebCam Feed </h1>\n\n<h5> Note: First run all the cells below, then use the buttons for detection.. </h5>",
      "type": "html"
    },
    {
      "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>Face Recognition</title>\n  <!-- Include Cropper.js library -->\n  <link rel=\"stylesheet\" href=\"https://unpkg.com/cropperjs/dist/cropper.css\">\n  <style>\n    #container {\n      display: flex;\n      justify-content: space-between;\n      width: 800px; /* Adjust the total width as needed */\n      margin: auto; /* Center the container */\n    }\n\n    #videoContainer {\n      position: relative;\n      width: 480px; /* Adjust to your video stream width */\n      height: 480px; /* Adjust to your video stream height */\n    }\n\n    #croppingBox {\n      position: absolute;\n      width: 240px;\n      height: 240px;\n      left: 50%;\n      top: 50%;\n      transform: translate(-50%, -50%);\n      border: 2px dashed red; /* Adjust styling as needed */\n      box-sizing: border-box;\n      pointer-events: none; /* Ensure the box doesn't interfere with user interaction */\n    }\n\n    #canvasContainer {\n      width: 240px; /* Adjust to your canvas width */\n      height: 240px; /* Adjust to your canvas height */\n    }\n\n    #canvas {\n      width: 100%;\n      height: 100%;\n    }\n  </style>\n</head>\n<body>\n  <div id=\"container\">\n    <div id=\"videoContainer\">\n      <video id=\"video\" width=\"400\" height=\"480\" autoplay></video>\n      <div id=\"croppingBox\"></div>\n    </div>\n    <div id=\"canvasContainer\">\n      <canvas id=\"canvas\" width=\"240\" height=\"240\"></canvas>\n    </div>\n  </div>\n  <div>\n    <button id=\"captureBtn\">Capture</button>\n<button id=\"processBtn\">Process</button>\n  </div>\n\n  <script src=\"main.js\"></script>\n</body>\n</html>\n",
      "status": "",
      "output": "\n\n\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>Face Recognition</title>\n  <!-- Include Cropper.js library -->\n  <link rel=\"stylesheet\" href=\"https://unpkg.com/cropperjs/dist/cropper.css\">\n  <style>\n    #container {\n      display: flex;\n      justify-content: space-between;\n      width: 800px; /* Adjust the total width as needed */\n      margin: auto; /* Center the container */\n    }\n\n    #videoContainer {\n      position: relative;\n      width: 480px; /* Adjust to your video stream width */\n      height: 480px; /* Adjust to your video stream height */\n    }\n\n    #croppingBox {\n      position: absolute;\n      width: 240px;\n      height: 240px;\n      left: 50%;\n      top: 50%;\n      transform: translate(-50%, -50%);\n      border: 2px dashed red; /* Adjust styling as needed */\n      box-sizing: border-box;\n      pointer-events: none; /* Ensure the box doesn't interfere with user interaction */\n    }\n\n    #canvasContainer {\n      width: 240px; /* Adjust to your canvas width */\n      height: 240px; /* Adjust to your canvas height */\n    }\n\n    #canvas {\n      width: 100%;\n      height: 100%;\n    }\n  </style>\n\n\n  <div id=\"container\">\n    <div id=\"videoContainer\">\n      <video id=\"video\" width=\"400\" height=\"480\" autoplay=\"\"></video>\n      <div id=\"croppingBox\"></div>\n    </div>\n    <div id=\"canvasContainer\">\n      <canvas id=\"canvas\" width=\"240\" height=\"240\"></canvas>\n    </div>\n  </div>\n  <div>\n    <button id=\"captureBtn\">Capture</button>\n<button id=\"processBtn\">Process</button>\n  </div>\n\n  <script src=\"main.js\"></script>\n\n\n",
      "type": "html"
    },
    {
      "code": "      // Access the camera and get video stream..\n      navigator.mediaDevices.getUserMedia({ video: true })\n        .then((cameraStream) => {\n          stream = cameraStream;\n          video.srcObject = cameraStream;\n        })\n        .catch((error) => {\n         show('Error accessing camera:', error);\n        });",
      "status": "[29]<br><span style=\"font-size:8px\">68ms<span></span></span>",
      "output": "",
      "type": "code"
    },
    {
      "code": "// Capture images from the box portion of 240x240 pixels.\n\nconst video = document.getElementById('video');\nconst canvas = document.getElementById('canvas');\nconst ctx = canvas.getContext('2d');\n\n// Capture an image\ndocument.getElementById('captureBtn').addEventListener('click', () => {\n  // Draw the current frame from the video onto the canvas\n  ctx.drawImage(video, 240, 170, 240, 240, 0, 0,240, 240);\n\n  // Now, the captured image is in the canvas element\n  // You can further process or display it as needed\n});",
      "status": "[30]<br><span style=\"font-size:8px\">19ms<span></span></span>",
      "output": "",
      "type": "code"
    },
    {
      "code": "// Get data from canvas (image captured).. and store into array.\n\ngetPixels = function(){\nconst canvas = document.getElementById('canvas');\nconst context = canvas.getContext('2d');\n\n// Get image data\nconst imageData = context.getImageData(0, 0, canvas.width, canvas.height);\npixels = imageData.data;\n  return pixels;\n}\n",
      "status": "[31]<br><span style=\"font-size:8px\">16ms<span></span></span>",
      "output": "function(){\nconst canvas = document.getElementById('canvas');\nconst context = canvas.getContext('2d');\n\n// Get image data\nconst imageData = context.getImageData(0, 0, canvas.width, canvas.height);\npixels = imageData.data;\n  return pixels;\n} <br>",
      "type": "code"
    },
    {
      "code": "// Convert the RGB image into grayscale image..\n\ngetGrayPixels = function(pixels){\n\ngrayscalePixels = [];\n\nfor (let i = 0; i < pixels.length; i += 4) {\n  const red = pixels[i];\n  const green = pixels[i + 1];\n  const blue = pixels[i + 2];\n\n  // Calculate luminance (grayscale value)\n  const grayscaleValue = 0.299 * red + 0.587 * green + 0.114 * blue;\n\n  // Set the same grayscale value for all three channels (R, G, B)\n  grayscalePixels.push(grayscaleValue);\n  \n}\n  return grayscalePixels;\n}\n",
      "status": "[32]<br><span style=\"font-size:8px\">15ms<span></span></span>",
      "output": "function(pixels){\n\ngrayscalePixels = [];\n\nfor (let i = 0; i &lt; pixels.length; i += 4) {\n  const red = pixels[i];\n  const green = pixels[i + 1];\n  const blue = pixels[i + 2];\n\n  // Calculate luminance (grayscale value)\n  const grayscaleValue = 0.299 * red + 0.587 * green + 0.114 * blue;\n\n  // Set the same grayscale value for all three channels (R, G, B)\n  grayscalePixels.push(grayscaleValue);\n  \n}\n  return grayscalePixels;\n} <br>",
      "type": "code"
    },
    {
      "code": "// Resize the 240x240 image into 48x48 pixel to fit the training model..\n\nresizeImage = function (pixels, originalWidth, originalHeight, newWidth, newHeight) {\n  const resizedPixels = [];\n\n  for (let y = 0; y < newHeight; y++) {\n    for (let x = 0; x < newWidth; x++) {\n      const originalX = Math.floor(x * (originalWidth / newWidth));\n      const originalY = Math.floor(y * (originalHeight / newHeight));\n\n      const index = (originalY * originalWidth + originalX);\n      resizedPixels.push(pixels[index]);\n    }\n  }\n\n  return resizedPixels;\n}\n\n",
      "status": "[33]<br><span style=\"font-size:8px\">15ms<span></span></span>",
      "output": "function (pixels, originalWidth, originalHeight, newWidth, newHeight) {\n  const resizedPixels = [];\n\n  for (let y = 0; y &lt; newHeight; y++) {\n    for (let x = 0; x &lt; newWidth; x++) {\n      const originalX = Math.floor(x * (originalWidth / newWidth));\n      const originalY = Math.floor(y * (originalHeight / newHeight));\n\n      const index = (originalY * originalWidth + originalX);\n      resizedPixels.push(pixels[index]);\n    }\n  }\n\n  return resizedPixels;\n} <br>",
      "type": "code"
    },
    {
      "code": "// Function to be called on clicking the process button.. which do all the image processing task and finllay alert the result..\n\ndocument.getElementById('processBtn').addEventListener('click', () => {\n\npixels = getPixels()\ngrayscalePixels = getGrayPixels(pixels)\nimgdata = resizeImage(grayscalePixels, 240, 240, 48, 48);\nimgdata = normalizeInput(imgdata)\nexpression = Maxprob(net.run(imgdata))\nemotion = mapexp(expression)\nexpressions_map = {0:\"Angry\", 1:\"Disgust\", 2:\"Fear\", 3:\"Happy\", 4:\"Sad\", 5:\"Surprise\", 6:\"Neutral\"}  \nemotions_map = {0:\"Neutral\", 1: \"Positive\",  2: \"Negative\"}\n \n alert(\"Expression: \" + expressions_map[expression] + \"\\n\" + \"Emotion: \" +  emotions_map[emotion])\n  \n});",
      "status": "[34]<br><span style=\"font-size:8px\">18ms<span></span></span>",
      "output": "",
      "type": "code"
    },
    {
      "code": "<h1> Thankyou !!! </h1>",
      "status": "",
      "output": "<h1> Thankyou !!! </h1>",
      "type": "html"
    }
  ],
  "source": "https://github.com/gopi-suvanam/scribbler",
  "run_on_load": false
}